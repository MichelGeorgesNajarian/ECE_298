//***************************************************************************************
//  MSP430 Blink the LED Demo - Software Toggle P1.0
//
//  Description; Toggle P1.0 by xor'ing P1.0 inside of a software loop.
//  ACLK = n/a, MCLK = SMCLK = default DCO
//
//                MSP430x5xx
//             -----------------
//         /|\|              XIN|-
//          | |                 |
//          --|RST          XOUT|-
//            |                 |
//            |             P1.0|-->LED
//
//  Texas Instruments, Inc
//  July 2013
//***************************************************************************************

#include <msp430.h>

void whichLED(int);

void main(void) {
    WDTCTL = WDTPW | WDTHOLD;               // Stop watchdog timer
    PM5CTL0 &= ~LOCKLPM5;                   // Disable the GPIO power-on default high-impedance mode
                                            // to activate previously configured port settings
    P1DIR &= 0x00;
    P1DIR |= 0x01;                          // Set P1.0 to output direction
    P1IES = 0x04;                           //high to low transition
    P4DIR |= 0x01;
    P1REN |= BIT2; // Resistor for P1.2
    P1OUT = BIT2; // Resistor pulls up
    P4OUT = 0x01;
    P5DIR &= 0x00; // orange led
    P5DIR |= BIT0; // set as output
    P5DIR |= BIT1;
    P5OUT |= BIT0; //turn off
    P5OUT |= BIT1;
    P2DIR &= 0x00;
    P2DIR |= BIT7;
    P2DIR |= BIT5; // set as output
    P2OUT |= BIT7;
    P2OUT |= BIT5; //turn off
    P1IE |= BIT2;                           // Enabling interrupts for P1.2
    P1IFG &= ~BIT2;                         // Clearing interrupt flag for P1.2

    //P5.1 GREEN
    //P5.0 ORANGE
    //P2.7 YELLOW
    //P2.5 RED
    //P

    __bis_SR_register(GIE);          // Enter LPM0 w/ interrupt

    int j = 0;

    for(;;) {
        volatile unsigned int i;            // volatile to prevent optimization


        P4OUT ^= 0x01;                      // Toggle P1.0 using exclusive-OR
        i = 10000;                          // SW Delay
        j %= 4;
        whichLED(j);
        j++;
        do i--;
        while(i != 0);
    }



}
#pragma vector = PORT1_VECTOR
    __interrupt void PORT1_ISR(void){
    P1OUT ^= BIT0; // led on
    P1IFG &= ~BIT2;                         // Clearing interrupt flag for P1.2
    __bic_SR_register_on_exit(LPM0_bits);
}

    void whichLED(int j){
        if (j == 0) { // turn on green led
            P5OUT &= 0x00; // turn off red
            P2OUT &= 0x00; // turn off orange
            P5OUT |= BIT1; // turn on green
        } else if (j == 1) {
            P5OUT &= 0x00; // turn off orange and green
            P2OUT &= 0x00; // turn off red and yellow
            P2OUT |= BIT7; // turn on yellow led
        } else if (j == 3) {
            P5OUT &= 0x00; // turn off red
            P2OUT &= 0x00; // turn off orange
            P5OUT |= BIT0; // turn on orange led
        } else {
            P5OUT &= 0x00; // turn off red
            P2OUT &= 0x00; // turn off orange
            P2OUT |= BIT5; // turn on red led
        }
    }
