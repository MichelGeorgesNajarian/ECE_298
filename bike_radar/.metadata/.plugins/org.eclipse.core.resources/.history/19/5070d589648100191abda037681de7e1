#include <msp430.h>
#include <msp430fr4133.h>



/**
 * main.c
 */

void Delayus(unsigned int delayamt)
{
    // Delay is 0-65535 usec; already initialized to use SMCLK, divide by 16 so timer increments once/usec; upon reaching delayamt, one interrupt is given and the delay is over
        TA0CCR0 = delayamt;                     // Interrupt when up-count to this value
        TA0CTL |= (MC_1 | TACLR);
      __bis_SR_register(LPM0_bits | GIE);       // Go to sleep. Timer0 ISR will wake us up when proper time has elapsed
}

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

    P1OUT &= 0x00; // setting output to 0
    P1DIR &= 0x00;
    P1DIR |= BIT4; // sensor trig as output 0000 0000 | 0000 1000
    //P1DIR &= ~BIT4; // sensor echo as input


    while (1){ //infinite loop
        P1OUT |= BIT4; //p1.4 is high for 10 microseconds (trigger pulse)
        Delayus(10);
        P1OUT &= ~BIT4;
        Delayus(50);
    }
    return 0;
}

#pragma vector=TIMER0_A0_VECTOR
__interrupt void TIMER0_A0_ISR(void)
{
    TA0CTL |= MC_0;                             // Stop Timer0
    __bic_SR_register_on_exit(LPM0_bits);       // Wakeup from LPM0 and continue after the Delayus function
}
